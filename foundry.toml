[profile.default]
src = 'contracts'
out = 'out'
libs = ['node_modules', 'lib']
test = 'test'
# libraries = ['contracts/test/stubs/router/utils/BalancerInteractions.sol:BalancerInteractions:0x00B7DB8223222630ca9bFb91637818Eea9c4723b', 'contracts/test/stubs/router/utils/CalculateChir.sol:CalculateChir:0x1284e4373D45635f09e187B36164C575261c45eD']
cache_path  = 'cache_forge'
# fs_permissions = [{ access = "read", path = "./"}, { access = "write", path = "./"}]
fs_permissions = [{ access = "read-write", path = "./"}]
remappings = [
#   "ds-test/=lib/forge-std/lib/ds-test/src/",
#   "eth-gas-reporter/=node_modules/eth-gas-reporter/",
  "forge-std/=lib/forge-std/src/",
#   "hardhat/=node_modules/hardhat/",
#   "solplot/=lib/solplot/",
#   "daosys/=lib/daosys/"
]
    # The Solc instance to use if any.
    # This takes precedence over `auto_detect_solc`, if a version is set then this overrides auto-detection.
solc = "0.8.25"
    # The EVM version by hardfork name
evm_version = 'paris'
    # Whether or not Forge should auto-detect the solc version to use
# auto_detect_solc = true
    # Print the sizes of the compiled contracts
sizes = true
    # Disables downloading missing solc versions
# offline = true

    # Enables or disables the optimizer
optimizer = true
    # The number of optimizer runs
optimizer_runs = 4294967295
    # Whether or not to use the Yul intermediate representation compilation pipeline
# via_ir = true

    # Switch optimizer components on or off in detail
[profile.optimizer_details]
    # The peephole optimizer is always on if no details are given,
    # use details to switch it off.
# peephole = true
    # The inliner is always off if no details are given,
    # use details to switch it on.
# inliner = true
    # The unused jumpdest remover is always on if no details are given,
    # use details to switch it off.
# jumpdestRemover = true
    # Sometimes re-orders literals in commutative operations.
# orderLiterals = true
    # Removes duplicate code blocks
# deduplicate = true
    # Common subexpression elimination, this is the most complicated step but
    # can also provide the largest gain.
# cse = true
    # Optimize representation of literal numbers and strings in code.
# constantOptimizer = true
    # Use unchecked arithmetic when incrementing the counter of for loops
    # under certain circumstances. It is always on if no details are given.
# simpleCounterForLoopUncheckedIncrement = true
    # The new Yul optimizer. Mostly operates on the code of ABI coder v2
    # and inline assembly.
    # It is activated together with the global optimizer setting
    # and can be deactivated here.
    # Before Solidity 0.6.0 it had to be activated through this switch.
# yul = true

[profile.optimizer_details.yul_details]
    # Improve allocation of stack slots for variables, can free up stack slots early.
    # Activated by default if the Yul optimizer is activated.
# stackAllocation = true
    # Select optimization steps to be applied. It is also possible to modify both the
    # optimization sequence and the clean-up sequence. Instructions for each sequence
    # are separated with the ":" delimiter and the values are provided in the form of
    # optimization-sequence:clean-up-sequence. For more information see
    # "The Optimizer > Selecting Optimizations".
    # This field is optional, and if not provided, the default sequences for both
    # optimization and clean-up are used. If only one of the sequences is provided
    # the other will not be run.
    # If only the delimiter ":" is provided then neither the optimization nor the clean-up
    # sequence will be run.
    # If set to an empty value, only the default clean-up sequence is used and
    # no optimization steps are applied.
# optimizerSteps = dhfoDgvulfnTUtnIf...

# [profile.rpc_storage_caching]
# chains = 'all'
# endpoints = 'all'

# --snip--
[rpc_endpoints]
mainnet_infura = "https://mainnet.infura.io/v3/${INFURA_KEY}"
payload = "https://rpc.payload.de"
